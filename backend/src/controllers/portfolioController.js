// backend/src/controllers/portfolioController.js

import Portfolio from '../models/Portfolio.js';

/**
 * Fetch all portfolio items
 */
export const getAllPortfolioItems = async (req, res) => {
  try {
    const items = await Portfolio.find()
      .sort({ uploadedAt: -1 })
      .select('-__v') // Exclude version key
      .populate('author', 'email publicEmail role'); // Populate author with masked email

    res.status(200).json({
      success: true,
      count: items.length,
       items
    });
  } catch (err) {
    console.error('ðŸŽ¨ Error fetching portfolio items:', err.message);
    res.status(500).json({
      success: false,
      message: 'Unable to fetch portfolio items'
    });
  }
};

/**
 * Fetch single portfolio item by ID or slug
 */
export const getPortfolioItemById = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Allow lookup by ID or slug
    const query = mongoose.Types.ObjectId.isValid(id) 
      ? { _id: id } 
      : { slug: id };

    const item = await Portfolio.findOne(query)
      .populate('author', 'email publicEmail role');

    if (!item) {
      return res.status(404).json({
        success: false,
        message: 'Portfolio item not found'
      });
    }

    res.status(200).json({
      success: true,
       item
    });
  } catch (err) {
    console.error('ðŸŽ¨ Error fetching portfolio item:', err.message);
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};

/**
 * Create new portfolio item
 */
export const createPortfolioItem = async (req, res) => {
  try {
    const { title, description, category, imageUrl } = req.body;

    // Validate required fields
    if (!title || !description) {
      return res.status(400).json({
        success: false,
        message: 'Title and description are required'
      });
    }

    // Create item (slug will be auto-generated by model pre-save hook)
    const newItem = await Portfolio.create({
      title: title.trim(),
      description: description.trim(),
      imageUrl: imageUrl || '',
      category: category || 'General',
      author: req.user._id // âœ… Use authenticated user from protect middleware
    });

    res.status(201).json({
      success: true,
      message: 'Portfolio item created successfully',
       newItem
    });
  } catch (err) {
    console.error('ðŸŽ¨ Error creating portfolio item:', err.message);
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: Object.values(err.errors).map(e => e.message).join(', ')
      });
    }
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};

/**
 * Update portfolio item
 */
export const updatePortfolioItem = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, category, imageUrl } = req.body;

    if (!title || !description) {
      return res.status(400).json({
        success: false,
        message: 'Title and description are required'
      });
    }

    // Let model handle slug generation automatically on save
    const updateData = {
      title: title.trim(),
      description: description.trim(),
      category: category || 'General',
      imageUrl: imageUrl || undefined // Only update if provided
    };

    const updatedItem = await Portfolio.findByIdAndUpdate(
      id,
      updateData,
      { 
        new: true, 
        runValidators: true,
        context: 'query' 
      }
    ).populate('author', 'email publicEmail role');

    if (!updatedItem) {
      return res.status(404).json({
        success: false,
        message: 'Portfolio item not found'
      });
    }

    res.status(200).json({
      success: true,
      message: 'Portfolio item updated successfully',
       updatedItem
    });
  } catch (err) {
    console.error('ðŸŽ¨ Error updating portfolio item:', err.message);
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: Object.values(err.errors).map(e => e.message).join(', ')
      });
    }
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};

/**
 * Delete portfolio item
 */
export const deletePortfolioItem = async (req, res) => {
  try {
    const { id } = req.params;
    const deletedItem = await Portfolio.findByIdAndDelete(id);

    if (!deletedItem) {
      return res.status(404).json({
        success: false,
        message: 'Portfolio item not found'
      });
    }

    res.status(200).json({
      success: true,
      message: 'Portfolio item deleted successfully',
       deletedItem
    });
  } catch (err) {
    console.error('ðŸŽ¨ Error deleting portfolio item:', err.message);
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};