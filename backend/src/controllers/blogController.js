// backend/src/controllers/blogController.js

import BlogPost from '../models/BlogPost.js';

/**
 * Fetch all blog posts (published, sorted by date)
 */
export const getAllBlogPosts = async (req, res) => {
  try {
    const posts = await BlogPost.find()
      .sort({ publishedAt: -1 }) // Sort by published date, not createdAt
      .select('-__v') // Exclude version key
      .populate('author', 'email publicEmail role'); // Populate author info (masked email)

    res.status(200).json({
      success: true,
      count: posts.length,
      data: posts
    });
  } catch (err) {
    console.error('ðŸ“š Error fetching blog posts:', err.message);
    res.status(500).json({
      success: false,
      message: 'Unable to fetch blog posts'
    });
  }
};

/**
 * Fetch single blog post by ID or slug
 */
export const getBlogPostById = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Allow lookup by ID or slug
    const query = mongoose.Types.ObjectId.isValid(id) 
      ? { _id: id } 
      : { slug: id };

    const post = await BlogPost.findOne(query)
      .populate('author', 'email publicEmail role');

    if (!post) {
      return res.status(404).json({
        success: false,
        message: 'Blog post not found'
      });
    }

    res.status(200).json({
      success: true,
      data: post
    });
  } catch (err) {
    console.error('ðŸ“š Error fetching blog post:', err.message);
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};

/**
 * Create new blog post
 */
export const createBlogPost = async (req, res) => {
  try {
    const { title, content, imageUrl, category } = req.body;

    // Validate required fields
    if (!title || !content) {
      return res.status(400).json({
        success: false,
        message: 'Title and content are required'
      });
    }

    // Create post (slug will be auto-generated by model pre-save hook)
    const newPost = await BlogPost.create({
      title: title.trim(),
      content: content.trim(),
      imageUrl: imageUrl || '',
      category: category || 'General',
      author: req.user._id, // âœ… Use authenticated user from protect middleware
      publishedAt: req.body.publishedAt || new Date() // Allow custom publish date
    });

    res.status(201).json({
      success: true,
      message: 'Blog post created successfully',
      data: newPost
    });
  } catch (err) {
    console.error('ðŸ“š Error creating blog post:', err.message);
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: Object.values(err.errors).map(e => e.message).join(', ')
      });
    }
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};

/**
 * Update blog post
 */
export const updateBlogPost = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, imageUrl, category, publishedAt } = req.body;

    if (!title || !content) {
      return res.status(400).json({
        success: false,
        message: 'Title and content are required'
      });
    }

    // Let model handle slug generation automatically on save
    const updateData = {
      title: title.trim(),
      content: content.trim(),
      imageUrl: imageUrl || '',
      category: category || 'General',
      publishedAt: publishedAt || undefined, // Only update if provided
      updatedAt: new Date()
    };

    const updatedPost = await BlogPost.findByIdAndUpdate(
      id,
      updateData,
      { 
        new: true, 
        runValidators: true,
        context: 'query' 
      }
    ).populate('author', 'email publicEmail role');

    if (!updatedPost) {
      return res.status(404).json({
        success: false,
        message: 'Blog post not found'
      });
    }

    res.status(200).json({
      success: true,
      message: 'Blog post updated successfully',
      data: updatedPost
    });
  } catch (err) {
    console.error('ðŸ“š Error updating blog post:', err.message);
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: Object.values(err.errors).map(e => e.message).join(', ')
      });
    }
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};

/**
 * Delete blog post
 */
export const deleteBlogPost = async (req, res) => {
  try {
    const { id } = req.params;
    const deletedPost = await BlogPost.findByIdAndDelete(id);

    if (!deletedPost) {
      return res.status(404).json({
        success: false,
        message: 'Blog post not found'
      });
    }

    res.status(200).json({
      success: true,
      message: 'Blog post deleted successfully',
      data: deletedPost
    });
  } catch (err) {
    console.error('ðŸ“š Error deleting blog post:', err.message);
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};